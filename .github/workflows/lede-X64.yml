name: "构建LEDE-X64固件"

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: '40 16 */3 * *'  # 每 3 天北京时间 00:40

env:
  # ───── 源码与脚本 ─────
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: x64.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh

  # ───── 上传/发布选项 ─────
  UPLOAD_FIRMWARE: 'true'
  UPLOAD_RELEASE: 'true'

  # ───── 构建参数 ─────
  TZ: Asia/Shanghai
  MAKEFLAGS: "-j$(nproc) V=s"
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_MAXSIZE: "500M"

jobs:
  build-firmware:
    name: 构建固件
    runs-on: ubuntu-22.04
    concurrency:
      group: lede-${{ github.ref }}
      cancel-in-progress: true

    steps:
    # 1️⃣ 记录开始时间
    - name: 记录开始时间
      run: |
        echo "BUILD_START=$(date +%s)" >> "$GITHUB_ENV"
        echo "TIME0=$(date '+%Y-%m-%d %H:%M:%S')" >> "$GITHUB_ENV"
        echo "RELEASE_TAG=$(date '+%Y.%m.%d-%H%M')" >> $GITHUB_ENV

    # 2️⃣ 检出仓库
    - name: 检出仓库
      uses: actions/checkout@v4

    # 3️⃣ 准备构建环境
    - name: 准备构建环境
      env: { DEBIAN_FRONTEND: noninteractive }
      run: |
        sudo rm -rf /usr/share/{dotnet,man,doc,groff,info,lintian,linda,locale} \
                    /usr/local/lib/android /opt/ghc /usr/lib/jvm /usr/share/swift \
                    /usr/local/go /opt/hostedtoolcache/* /usr/share/az_*
        sudo docker system prune -af --volumes || true
        sudo apt-get -qq update
        sudo apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison \
          build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk \
          gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool \
          libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev \
          libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev \
          libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 \
          python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
          swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev uuid-dev libuuid1
        sudo apt-get -qq autoremove --purge
        sudo apt-get -qq clean

    # 4️⃣ 克隆源码
    - name: 克隆源码到 /mnt
      run: |
        sudo mkdir -p /mnt/openwrt && sudo chown $USER:$USER /mnt/openwrt
        git clone --depth 30 "$REPO_URL" -b "$REPO_BRANCH" /mnt/openwrt
        ln -sf /mnt/openwrt "$GITHUB_WORKSPACE/openwrt"
        cd /mnt/openwrt && echo "SOURCE_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

    # 5️⃣ 配置 ccache
    - name: 设置 ccache
      uses: actions/cache@v4
      with:
        path: /mnt/openwrt/.ccache
        key: ccache-${{ runner.os }}-${{ github.run_id }}
        restore-keys: ccache-${{ runner.os }}-

    # 6️⃣ DL / Feeds / 工具链缓存
    - name: 恢复 DL 缓存
      uses: actions/cache@v4
      with:
        path: /mnt/openwrt/dl
        key: dl-${{ runner.os }}-lede-x86
        restore-keys: dl-${{ runner.os }}-

    - name: 恢复 Feeds 缓存
      uses: actions/cache@v4
      with:
        path: /mnt/openwrt/feeds
        key: feeds-${{ runner.os }}
        restore-keys: feeds-${{ runner.os }}-lede-x86

    - name: 恢复工具链缓存
      uses: actions/cache@v4
      with:
        path: /mnt/openwrt/staging_dir
        key: toolchain-${{ runner.os }}-${{ github.run_id }}
        restore-keys: toolchain-${{ runner.os }}-

    - name: 设置依赖缓存
      uses: actions/cache@v4
      id: dl-cache
      with:
        path: |
          /mnt/openwrt/dl
          /mnt/openwrt/build_dir/host
        key: ${{ runner.os }}-lede-${{ env.SOURCE_COMMIT }}-${{ hashFiles('include/**', 'package/**', 'target/**') }}
        restore-keys: |
          ${{ runner.os }}-lede-${{ env.SOURCE_COMMIT }}-
          ${{ runner.os }}-lede-

    # 7️⃣ 自定义 feeds
    - name: 应用自定义 feeds和config
      run: |
        [ -e files ] && cp "$GITHUB_WORKSPACE/files" /mnt/openwrt/files   || echo "::warning::没有定义 配置文件files"
        [ -f "$DIY_P1_SH" ] && chmod +x "$DIY_P1_SH" && "$GITHUB_WORKSPACE/$DIY_P1_SH" || echo "::notice::没有定义 配置文件DIY_P1_SH"
        [ -e $CONFIG_FILE ] && cp "$GITHUB_WORKSPACE/$CONFIG_FILE" /mnt/openwrt/.config || echo "::warning::没有定义 配置文件CONFIG_FILE"        
        cd /mnt/openwrt  && make defconfig
        sed -i 's/OpenWrt/Build${{ env.RELEASE_TAG }} @ OpenWrt/g' package/lean/default-settings/files/zzz-default-settings


    # 8️⃣ 更新和安装 feeds（始终执行，无条件）
    - name: 更新和安装 feeds
      run: |
        cd /mnt/openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a -f
        [ -f "$GITHUB_WORKSPACE/$DIY_P2_SH" ] && chmod +x "$GITHUB_WORKSPACE/$DIY_P2_SH" && "$GITHUB_WORKSPACE/$DIY_P2_SH" || echo "::notice::没有定义 配置文件DIY_P2_SH"

    # 9️⃣ 生成上游更新日志
    - name: 生成上游更新日志
      run: |
        cd /mnt/openwrt
        git fetch --deepen=30 || true
        git -C feeds/packages fetch --deepen=30 || true
        git -C feeds/luci fetch --deepen=30 || true
        mkdir -p $GITHUB_WORKSPACE/changelog
        LOG_LEDE=$(git log --date=short --pretty="- [%ad] %s" --no-merges -n 15)
        LOG_PKG=$(git -C feeds/packages log --date=short --pretty="- [%ad] %s" --no-merges -n 10 || echo "packages 仓库不可用")
        LOG_LUCI=$(git -C feeds/luci log --date=short --pretty="- [%ad] %s" --no-merges -n 10 || echo "luci 仓库不可用")
        {
          echo "📦 LEDE 上游更新日志 (分支: $REPO_BRANCH)"
          echo
          echo "##🔧 [lede 主仓库](https://github.com/coolsnowwolf/lede)"
          echo "$LOG_LEDE"
          echo
          echo "##📦 [packages](https://github.com/coolsnowwolf/packages)"
          echo "$LOG_PKG"
          echo
          echo "##🖥️ [luci](https://github.com/coolsnowwolf/luci)"
          echo "$LOG_LUCI"
        } > $GITHUB_WORKSPACE/changelog/complete_changelog.txt
        echo "CHANGELOG_FILE=$GITHUB_WORKSPACE/changelog/complete_changelog.txt" >> $GITHUB_ENV

    # 1️⃣0️⃣ 下载源码依赖
    - name: 下载源码依赖
      run: |
        cd /mnt/openwrt
        make defconfig
        for i in {1..3}; do
          if make download -j8; then break
          elif [ $i -eq 3 ]; then make download -j1 V=s
          else echo "::warning::第 $i 次依赖下载失败，10 秒后重试..." && sleep 10
          fi
        done
        find dl -size -1024c -exec rm -f {} \;

    # 1️⃣1️⃣ 编译固件
    - name: 编译固件
      run: |
        cd /mnt/openwrt
        mkdir -p logs
        echo "::notice::ccache 统计：" && ccache -s
        if ! make $MAKEFLAGS 2>&1 | tee logs/build.log; then
          echo "::error::并行编译失败，尝试单线程"
          make -j1 V=s 2>&1 | tee -a logs/build.log || exit 1
        fi
        echo "::notice::ccache 编译后：" && ccache -s

    # 1️⃣2️⃣ 上传编译日志
    - name: 上传编译日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: 编译日志-${{ github.run_number }}
        path: /mnt/openwrt/logs/build.log
        retention-days: 3

    # 1️⃣3️⃣ 记录结束时间和耗时
    - name: 记录结束时间和耗时
      run: |
        echo "BUILD_END=$(date +%s)" >> "$GITHUB_ENV"
        ELAPSED=$(( BUILD_END - BUILD_START ))        
        printf -v ELAPSED "%02dh %02dm %02ds" $((ELAPSED_SEC/3600)) $((ELAPSED_SEC%3600/60)) $((ELAPSED_SEC%60))
        echo "ELAPSED=$ELAPSED" >> $GITHUB_ENV
        echo "::notice::总耗时: $ELAPSED"
        echo "TIME1=$(date '+%Y-%m-%d %H:%M:%S')" >> "$GITHUB_ENV"

    # 1️⃣4️⃣ 整理固件
    - name: 整理固件文件
      id: organize
      run: |
        cd /mnt/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE_DIR=$PWD" >> $GITHUB_ENV

    # 1️⃣5️⃣ 上传固件
    - name: 上传固件产物
      if: env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt固件-${{ github.run_number }}
        path: ${{ env.FIRMWARE_DIR }}
        retention-days: 3

    # 1️⃣6️⃣ 上传更新日志
    - name: 上传更新日志
      uses: actions/upload-artifact@v4
      with:
        name: 更新日志-${{ github.run_number }}
        path: ${{ env.CHANGELOG_FILE }}
        retention-days: 0

    # 1️⃣7️⃣ 发布 GitHub 版本
    - name: 发布 GitHub 版本
      if: env.UPLOAD_RELEASE == 'true' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: 构建 #${{ github.run_number }} (耗时 ${{ env.ELAPSED }})
        body: |
          📦 **编译时间段**  
          ⏰ 从 **${{ env.TIME0 }}** 到 **${{ env.TIME1 }}**  
          🕒 **总耗时：${{ env.ELAPSED }}**
          🔄 **上游更新日志**  
          
          $(cat ${{ env.CHANGELOG_FILE }})
        files: |
          ${{ env.FIRMWARE_DIR }}/*
          ${{ env.CHANGELOG_FILE }}

    # 1️⃣8️⃣ 清理旧版本
    - name: 清理旧版本
      if: env.UPLOAD_RELEASE == 'true' && github.ref == 'refs/heads/main'
      uses: dev-drprasad/delete-older-releases@v0.3.4
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      with:
        keep_latest: 5
        delete_tags: true
