name: LEDEX64

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
   - cron: '40 16 */3 * *'  # 修复引号问题

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: x64.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  # 新增环境变量：控制编译过程中的磁盘使用
  MAKEFLAGS: "-j$(nproc) V=s"  # 优化编译参数
  CCACHE_DIR: ${{ github.workspace }}/.ccache  # ccache 目录
  CCACHE_MAXSIZE: "500M"  # 限制 ccache 最大大小

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查
      uses: actions/checkout@main

    - name: 初始化运行环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 优化磁盘清理，增加更多清理项
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc \
                    /usr/lib/jvm /usr/share/swift /usr/local/go \
                    /opt/hostedtoolcache/CodeQL
        sudo docker system prune -af --volumes  # 清理所有未使用的容器和卷
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://github.com/naoki66/Actions_lean_LEDE/raw/main/depends-ubuntu)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        df -h  # 显示磁盘使用情况

    - name: 克隆源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        echo "TIME0=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        df -h  # 显示克隆后的磁盘使用情况

    - name: 设置 ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-openwrt
        max-size: ${{ env.CCACHE_MAXSIZE }}

    - name: 对比编译工具环境缓存
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        toolchain: 'true'
        skip: 'true'
        clean: 'false'
        prefix: ${{ github.workspace }}/openwrt

    - name: 载入配置feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装feeds、更新日期
      run: |
       cd openwrt && ./scripts/feeds install -a
       echo "DATE1=$(date "+%Y.%m.%d-%H:%M")" >> $GITHUB_ENV

    - name: 载入配置文件、修改固件日期
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        sed -i 's/OpenWrt/Build${{ env.DATE1 }} @ OpenWrt/g' package/lean/default-settings/files/zzz-default-settings

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        # 优化：删除小于1KB的下载文件，可能是下载失败的文件
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        df -h  # 显示下载后的磁盘使用情况

    - name: 编译前检查磁盘空间
      run: |
        # 检查磁盘使用率，如果超过85%则退出
        USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
        if [ $USAGE -gt 85 ]; then
          echo "磁盘空间不足，当前使用率: ${USAGE}%"
          df -h
          exit 1
        fi

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        # 优化编译命令，使用更稳健的重试策略
        make $MAKEFLAGS || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE= $(date +"%Y%m%d.%H%M")" >> $GITHUB_ENV
        echo "TIME1=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        df -h  # 显示编译后的磁盘使用情况

    - name: 检查空间
      if: (!cancelled())
      run: df -hT

    - name: 上传bin文件夹
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages  # 删除不需要的包文件，节省空间
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        df -h  # 显示整理后的磁盘使用情况

    - name: 上传固件文件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 创建release tag 生成更新信息
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "从${{ env.TIME0 }}开始到${{ env.TIME1 }}编译完成！<br/>" >> release.txt
        echo " <br/><a href="https://github.com/coolsnowwolf/lede">lede</a> 更新记录:" >> release.txt
        git -C openwrt log -3 --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:"更新人:%an -- %cd<br/>更新内容: %s<br/>哈希: %H "  >> release.txt        
        echo " <br/><br/><a href="https://github.com/coolsnowwolf/packages">packages</a>更新记录:" >> release.txt
        git -C openwrt/feeds/packages log -3 --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:"更新人:%an -- %cd<br/>更新内容: %s<br/>哈希: %H "  >> release.txt        
        echo " <br/><br/><a href="https://github.com/coolsnowwolf/luci">luci</a>更新记录:" >> release.txt
        git -C openwrt/feeds/luci log -3 --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:"更新人:%an -- %cd<br/>更新内容: %s<br/>哈希: %H "  >> release.txt        
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到release发布页
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除运行的工作流
      uses: naoki66/delete-workflow-runs@main
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT  }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 3

    - name: 删除旧Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT  }}
